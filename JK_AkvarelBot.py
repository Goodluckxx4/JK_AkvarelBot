import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = "8129897637:AAHV6aLm2wMYLx0a9SdvFq8Z01b02hW-GdM"
ADMIN_IDS = [497592544]  # ID –∞–¥–º–∏–Ω–æ–≤
CHAT_ID = -1001992519263  # ID —á–∞—Ç–∞ –ñ–ö

logging.basicConfig(level=logging.INFO)
conn = sqlite3.connect("residents.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS residents (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    name TEXT,
    apartment TEXT,
    phone TEXT
)
""")
conn.commit()

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_apartment = State()
    waiting_for_phone = State()
    waiting_for_edit_field = State()

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–´–• –£–ß–ê–°–¢–ù–ò–ö–û–í ===
@router.chat_member()
async def on_chat_member_update(event: ChatMemberUpdated):
    if event.new_chat_member.status == ChatMemberStatus.MEMBER:
        user = event.from_user
        mention_link = f'<a href="tg://user?id={user.id}">{user.first_name or "–ñ–∏—Ç–µ–ª—å"}</a>'
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {mention_link}!\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –ñ–ö –ê–∫–≤–∞—Ä–µ–ª—å.\n"
            "–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register"
        )
        await bot.send_message(user.id, text, parse_mode="HTML")

# === –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢–ê ===
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∂–∏–ª—å—Ü–æ–≤", callback_data="list")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ–Ω—è", callback_data="delete_me")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===
@router.callback_query(lambda c: c.data == "register")
async def cmd_register(callback: types.CallbackQuery, state: FSMContext):
    cursor.execute("SELECT * FROM residents WHERE user_id = ?", (callback.from_user.id,))
    if cursor.fetchone():
        await callback.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Registration.waiting_for_name)

@router.message(Registration.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ—Ç 1 –¥–æ 198):")
    await state.set_state(Registration.waiting_for_apartment)

@router.message(Registration.waiting_for_apartment)
async def process_apartment(message: types.Message, state: FSMContext):
    await state.update_data(apartment=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):")
    await state.set_state(Registration.waiting_for_phone)

@router.message(Registration.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    data = await state.get_data()
    name, apartment = data["name"], data["apartment"]

    cursor.execute("INSERT INTO residents (user_id, name, apartment, phone) VALUES (?, ?, ?, ?)", 
                   (message.from_user.id, name, apartment, phone))
    conn.commit()

    mention_link = f'<a href="tg://user?id={message.from_user.id}">{name}</a>'
    await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–ò–º—è: {mention_link}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", parse_mode="HTML")
    await state.clear()

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f"üîî –ù–æ–≤—ã–π –∂–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: {mention_link}, –∫–≤. {apartment}", parse_mode="HTML")

# === –°–ü–ò–°–û–ö –ñ–ò–õ–¨–¶–û–í ===
@router.callback_query(lambda c: c.data == "list")
async def cmd_list(callback: types.CallbackQuery):
    cursor.execute("SELECT name, apartment, phone FROM residents WHERE user_id = ?", (callback.from_user.id,))
    if not cursor.fetchone():
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω! –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.")
        return
    
    cursor.execute("SELECT name, apartment, phone, user_id FROM residents")
    rows = cursor.fetchall()

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∂–∏–ª—å—Ü–æ–≤</b>:\n\n"
    for r in rows:
        name, apartment, phone, user_id = r
        mention_link = f'<a href="tg://user?id={user_id}">{name}</a>'
        text += f"üè† –ö–≤. {apartment} - {mention_link}, {phone}\n"

    await callback.message.answer(text, parse_mode="HTML")

# === –£–î–ê–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
@router.callback_query(lambda c: c.data == "delete_me")
async def cmd_delete(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM residents WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

    for admin_id in ADMIN_IDS:
        await bot.send_message(admin_id, f"üî¥ {callback.from_user.full_name} —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–∑ –±–∞–∑—ã.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
